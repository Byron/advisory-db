<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RustSec Advisories</title><id>https://rustsec.org/feed.xml</id><updated>2022-04-27T00:00:00+00:00</updated><author><name>RustSec</name></author><icon>https://rustsec.org/favicon.ico</icon><link href="https://rustsec.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rustsec.org/" rel="alternate" type="text/html"/><subtitle xml:lang="en">Security advisories filed against Rust crates</subtitle><entry><title>RUSTSEC-2022-0017: Unsoundness in array-macro</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0017.html</id><updated>2022-04-27T00:00:00+00:00</updated><category term="code-execution"/><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0017.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0017: Unsoundness in array-macro"/><published>2022-04-27T00:00:00+00:00</published><summary xml:lang="en">`array!` macro is unsound when its length is impure constant</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/array-macro/RUSTSEC-2022-0017.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/array-macro/RUSTSEC-2022-0017.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0017
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;&lt;code&gt;array!&lt;/code&gt; macro is unsound when its length is impure constant&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-04-27&quot;&gt;
          April 27, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/array-macro.html&quot;&gt;array-macro&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/array-macro&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/code-execution.html&quot;&gt;code-execution&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://gitlab.com/KonradBorowski/array-macro/-/issues/5&quot;&gt;
          https://gitlab.com/KonradBorowski/array-macro/-/issues/5
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.1.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;2.1.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of this crate did substitute the array length provided by an user at compile-time multiple times.&lt;/p&gt;
&lt;p&gt;When an impure constant expression is passed as an array length (such as a result of an impure procedural macro), this can result in the initialization of an array with uninitialized types, which in turn can allow an attacker to execute arbitrary code.&lt;/p&gt;
&lt;p&gt;The flaw was corrected in commit &lt;a href=&quot;https://gitlab.com/KonradBorowski/array-macro/-/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d&quot;&gt;d5b63f72&lt;/a&gt; by making sure that array length is substituted just once.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0016: Vulnerability in wasmtime</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0016.html</id><updated>2022-03-31T00:00:00+00:00</updated><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0016.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0016: Vulnerability in wasmtime"/><published>2022-03-31T00:00:00+00:00</published><summary xml:lang="en">Use after free with `externref`s and epoch interruption in Wasmtime</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/wasmtime/RUSTSEC-2022-0016.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/wasmtime/RUSTSEC-2022-0016.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0016
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Use after free with &lt;code&gt;externref&lt;/code&gt;s and epoch interruption in Wasmtime&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-31&quot;&gt;
          March 31, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/wasmtime.html&quot;&gt;wasmtime&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/wasmtime&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/Wasm.html&quot;&gt;#Wasm&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/garbage-collection.html&quot;&gt;#garbage-collection&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24791&quot;&gt;CVE-2022-24791&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2&quot;&gt;
          https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.35.2&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.34.2, &amp;lt;0.35.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.34.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/Wasm.html&quot;&gt;#Wasm&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/garbage-collection.html&quot;&gt;#garbage-collection&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;wasmtime::Config::epoch_interruption&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;^0.34.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;^0.34.1&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;^0.35.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;^0.35.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2&quot;&gt;Use after free with &lt;code&gt;externref&lt;/code&gt;s and epoch interruption in Wasmtime&lt;/a&gt;&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0015: pty is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0015.html</id><updated>2022-03-22T00:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0015.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0015: pty is unmaintained"/><published>2022-03-22T00:00:00+00:00</published><summary xml:lang="en">pty is unmaintained</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/pty/RUSTSEC-2022-0015.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/pty/RUSTSEC-2022-0015.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0015
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;pty is unmaintained&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-22&quot;&gt;
          March 22, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/pty.html&quot;&gt;pty&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/pty&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/hibariya/pty-rs/issues/19&quot;&gt;
          https://github.com/hibariya/pty-rs/issues/19
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The repository hasn&apos;t received any updates since Jun 25, 2017 and the author is unresponsive.&lt;/p&gt;
&lt;p&gt;Maintained alternatives include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/tokio-pty-process&quot;&gt;&lt;code&gt;tokio-pty-process&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/pty-process&quot;&gt;&lt;code&gt;pty-process&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0014: Vulnerability in openssl-src</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0014.html</id><updated>2022-03-15T00:00:00+00:00</updated><category term="denial-of-service"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0014.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0014: Vulnerability in openssl-src"/><published>2022-03-15T00:00:00+00:00</published><summary xml:lang="en">Infinite loop in `BN_mod_sqrt()` reachable when parsing certificates</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/openssl-src/RUSTSEC-2022-0014.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/openssl-src/RUSTSEC-2022-0014.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0014
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Infinite loop in &lt;code&gt;BN_mod_sqrt()&lt;/code&gt; reachable when parsing certificates&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-15&quot;&gt;
          March 15, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/openssl-src.html&quot;&gt;openssl-src&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/openssl-src&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/denial-of-service.html&quot;&gt;denial-of-service&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0778&quot;&gt;CVE-2022-0778&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://www.openssl.org/news/secadv/20220315.txt&quot;&gt;
          https://www.openssl.org/news/secadv/20220315.txt
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=111.18, &amp;lt;300.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=300.0.5&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The &lt;code&gt;BN_mod_sqrt()&lt;/code&gt; function, which computes a modular square root, contains
a bug that can cause it to loop forever for non-prime moduli.&lt;/p&gt;
&lt;p&gt;Internally this function is used when parsing certificates that contain
elliptic curve public keys in compressed form or explicit elliptic curve
parameters with a base point encoded in compressed form.&lt;/p&gt;
&lt;p&gt;It is possible to trigger the infinite loop by crafting a certificate that
has invalid explicit curve parameters.&lt;/p&gt;
&lt;p&gt;Since certificate parsing happens prior to verification of the certificate
signature, any process that parses an externally supplied certificate may thus
be subject to a denial of service attack. The infinite loop can also be
reached when parsing crafted private keys as they can contain explicit
elliptic curve parameters.&lt;/p&gt;
&lt;p&gt;Thus vulnerable situations include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLS clients consuming server certificates&lt;/li&gt;
&lt;li&gt;TLS servers consuming client certificates&lt;/li&gt;
&lt;li&gt;Hosting providers taking certificates or private keys from customers&lt;/li&gt;
&lt;li&gt;Certificate authorities parsing certification requests from subscribers&lt;/li&gt;
&lt;li&gt;Anything else which parses ASN.1 elliptic curve parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also any other applications that use the &lt;code&gt;BN_mod_sqrt()&lt;/code&gt; where the attacker
can control the parameter values are vulnerable to this DoS issue.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0013: Vulnerability in regex</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0013.html</id><updated>2022-03-08T00:00:00+00:00</updated><category term="denial-of-service"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0013.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0013: Vulnerability in regex"/><published>2022-03-08T00:00:00+00:00</published><summary xml:lang="en">Regexes with large repetitions on empty sub-expressions take a very long time to parse</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/regex/RUSTSEC-2022-0013.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/regex/RUSTSEC-2022-0013.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0013
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Regexes with large repetitions on empty sub-expressions take a very long time to parse&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-08&quot;&gt;
          March  8, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/regex.html&quot;&gt;regex&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/regex&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/denial-of-service.html&quot;&gt;denial-of-service&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24713&quot;&gt;CVE-2022-24713&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw&quot;&gt;
          https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      
      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;7.5 &lt;span class=&quot;tag high&quot;&gt;
        HIGH
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Network&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;Low&lt;/d&gt;
          

          
          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Unchanged&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;High&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H&quot;&gt;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H&lt;/a&gt;&lt;/dd&gt;
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.5.5&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The Rust Security Response WG was notified that the &lt;code&gt;regex&lt;/code&gt; crate did not
properly limit the complexity of the regular expressions (regex) it parses. An
attacker could use this security issue to perform a denial of service, by
sending a specially crafted regex to a service accepting untrusted regexes. No
known vulnerability is present when parsing untrusted input with trusted
regexes.&lt;/p&gt;
&lt;p&gt;This issue has been assigned CVE-2022-24713. The severity of this vulnerability
is &amp;quot;high&amp;quot; when the &lt;code&gt;regex&lt;/code&gt; crate is used to parse untrusted regexes. Other uses
of the &lt;code&gt;regex&lt;/code&gt; crate are not affected by this vulnerability.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;regex&lt;/code&gt; crate features built-in mitigations to prevent denial of service
attacks caused by untrusted regexes, or untrusted input matched by trusted
regexes. Those (tunable) mitigations already provide sane defaults to prevent
attacks. This guarantee is documented and it&apos;s considered part of the crate&apos;s
API.&lt;/p&gt;
&lt;p&gt;Unfortunately a bug was discovered in the mitigations designed to prevent
untrusted regexes to take an arbitrary amount of time during parsing, and it&apos;s
possible to craft regexes that bypass such mitigations. This makes it possible
to perform denial of service attacks by sending specially crafted regexes to
services accepting user-controlled, untrusted regexes.&lt;/p&gt;
&lt;h2&gt;Affected versions&lt;/h2&gt;
&lt;p&gt;All versions of the &lt;code&gt;regex&lt;/code&gt; crate before or equal to 1.5.4 are affected by this
issue. The fix is include starting from  &lt;code&gt;regex&lt;/code&gt; 1.5.5.&lt;/p&gt;
&lt;h2&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;We recommend everyone accepting user-controlled regexes to upgrade immediately
to the latest version of the &lt;code&gt;regex&lt;/code&gt; crate.&lt;/p&gt;
&lt;p&gt;Unfortunately there is no fixed set of problematic regexes, as there are
practically infinite regexes that could be crafted to exploit this
vulnerability. Because of this, we do not recommend denying known problematic
regexes.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;We want to thank Addison Crump for responsibly disclosing this to us according
to the &lt;a href=&quot;https://www.rust-lang.org/policies/security&quot;&gt;Rust security policy&lt;/a&gt;, and for helping review the fix.&lt;/p&gt;
&lt;p&gt;We also want to thank Andrew Gallant for developing the fix, and Pietro Albini
for coordinating the disclosure and writing this advisory.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0012: Vulnerability in arrow2</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0012.html</id><updated>2022-03-04T00:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0012.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0012: Vulnerability in arrow2"/><published>2022-03-04T00:00:00+00:00</published><summary xml:lang="en">Arrow2 allows double free in `safe` code</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/arrow2/RUSTSEC-2022-0012.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/arrow2/RUSTSEC-2022-0012.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0012
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Arrow2 allows double free in &lt;code&gt;safe&lt;/code&gt; code&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-04&quot;&gt;
          March  4, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/arrow2.html&quot;&gt;arrow2&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/arrow2&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/jorgecarleitao/arrow2/issues/880&quot;&gt;
          https://github.com/jorgecarleitao/arrow2/issues/880
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.7.1, &amp;lt;0.8&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.8.2, &amp;lt;0.9&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.9.2, &amp;lt;0.10&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The struct &lt;code&gt;Ffi_ArrowArray&lt;/code&gt; implements &lt;code&gt;#derive(Clone)&lt;/code&gt; that is inconsistent with
its custom implementation of &lt;code&gt;Drop&lt;/code&gt;, resulting in a double free when cloned.&lt;/p&gt;
&lt;p&gt;Cloning this struct in &lt;code&gt;safe&lt;/code&gt; results in a segmentation fault, which is unsound.&lt;/p&gt;
&lt;p&gt;This derive was removed from this struct. All users are advised to either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bump the patch version of this crate (for versions &lt;code&gt;v0.7,v0.8,v0.9&lt;/code&gt;), or&lt;/li&gt;
&lt;li&gt;migrate to a more recent version of  the crate (when using &lt;code&gt;&amp;lt;0.7&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing so elimitates this vulnerability (code no longer compiles).&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0011: Vulnerability in rust-crypto</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0011.html</id><updated>2022-02-28T00:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0011.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0011: Vulnerability in rust-crypto"/><published>2022-02-28T00:00:00+00:00</published><summary xml:lang="en">Miscomputation when performing AES encryption in rust-crypto</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/rust-crypto/RUSTSEC-2022-0011.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/rust-crypto/RUSTSEC-2022-0011.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0011
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Miscomputation when performing AES encryption in rust-crypto&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-28&quot;&gt;
          February 28, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/rust-crypto.html&quot;&gt;rust-crypto&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/rust-crypto&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/aesni.html&quot;&gt;#aesni&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/aesni.html&quot;&gt;#aesni&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The following Rust program demonstrates some strangeness in AES encryption - if you have an immutable key slice and then operate on that slice, you get different encryption output than if you operate on a copy of that key.&lt;/p&gt;
&lt;p&gt;For these functions, we expect that extending a 16 byte key to a 32 byte key by repeating it gives the same encrypted data, because the underlying rust-crypto functions repeat key data up to the necessary key size for the cipher.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use crypto::{
    aes, blockmodes, buffer,
    buffer::{BufferResult, ReadBuffer, WriteBuffer},
    symmetriccipher,
};

fn encrypt(
    key: &amp;amp;[u8],
    iv: &amp;amp;[u8],
    data: &amp;amp;str,
) -&amp;gt; Result&amp;lt;String, symmetriccipher::SymmetricCipherError&amp;gt; {
    let mut encryptor =
        aes::cbc_encryptor(aes::KeySize::KeySize256, key, iv, blockmodes::PkcsPadding);

    let mut encrypted_data = Vec::&amp;lt;u8&amp;gt;::new();
    let mut read_buffer = buffer::RefReadBuffer::new(data.as_bytes());
    let mut buffer = [0; 4096];
    let mut write_buffer = buffer::RefWriteBuffer::new(&amp;amp;mut buffer);

    loop {
        let result = encryptor.encrypt(&amp;amp;mut read_buffer, &amp;amp;mut write_buffer, true)?;

        encrypted_data.extend(
            write_buffer
                .take_read_buffer()
                .take_remaining()
                .iter()
                .copied(),
        );

        match result {
            BufferResult::BufferUnderflow =&amp;gt; break,
            BufferResult::BufferOverflow =&amp;gt; {}
        }
    }

    Ok(hex::encode(encrypted_data))
}

fn working() {
    let data = &amp;quot;data&amp;quot;;
    let iv = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFF,
    ];
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    // The copy here makes the code work.
    let key_copy = key;
    let key2: Vec&amp;lt;u8&amp;gt; = key_copy.iter().cycle().take(32).copied().collect();
    println!(&amp;quot;key1:{} key2: {}&amp;quot;, hex::encode(&amp;amp;key), hex::encode(&amp;amp;key2));

    let x1 = encrypt(&amp;amp;key, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X1: {}&amp;quot;, x1);

    let x2 = encrypt(&amp;amp;key2, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X2: {}&amp;quot;, x2);

    assert_eq!(x1, x2);
}

fn broken() {
    let data = &amp;quot;data&amp;quot;;
    let iv = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFF,
    ];
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    // This operation shouldn&apos;t affect the contents of key at all.
    let key2: Vec&amp;lt;u8&amp;gt; = key.iter().cycle().take(32).copied().collect();
    println!(&amp;quot;key1:{} key2: {}&amp;quot;, hex::encode(&amp;amp;key), hex::encode(&amp;amp;key2));

    let x1 = encrypt(&amp;amp;key, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X1: {}&amp;quot;, x1);

    let x2 = encrypt(&amp;amp;key2, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X2: {}&amp;quot;, x2);

    assert_eq!(x1, x2);
}

fn main() {
    working();
    broken();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from this program:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;     Running `target/host/debug/rust-crypto-test`
key1:000102030405060708090a0b0c0d0e0f key2: 000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
X1: 90462bbe32965c8e7ea0addbbed4cddb
X2: 90462bbe32965c8e7ea0addbbed4cddb
key1:000102030405060708090a0b0c0d0e0f key2: 000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
X1: 26e847e5e7df1947bf82a650548a7d5b
X2: 90462bbe32965c8e7ea0addbbed4cddb
thread &apos;main&apos; panicked at &apos;assertion failed: `(left == right)`
  left: `&amp;quot;26e847e5e7df1947bf82a650548a7d5b&amp;quot;`,
 right: `&amp;quot;90462bbe32965c8e7ea0addbbed4cddb&amp;quot;`&apos;, src/main.rs:83:5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notably, the X1 key in the &lt;code&gt;broken()&lt;/code&gt; test changes every time after rerunning the program.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0010: Unsoundness in enum-map</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0010.html</id><updated>2022-02-17T00:00:00+00:00</updated><category term="code-execution"/><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0010.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0010: Unsoundness in enum-map"/><published>2022-02-17T00:00:00+00:00</published><summary xml:lang="en">enum_map macro can cause UB when `Enum` trait is incorrectly implemented</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/enum-map/RUSTSEC-2022-0010.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/enum-map/RUSTSEC-2022-0010.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0010
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;enum_map macro can cause UB when &lt;code&gt;Enum&lt;/code&gt; trait is incorrectly implemented&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-17&quot;&gt;
          February 17, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/enum-map.html&quot;&gt;enum-map&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/enum-map&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/code-execution.html&quot;&gt;code-execution&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202&quot;&gt;
          https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.0.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;2.0.0-2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of this crate did not properly check the length of an enum when using &lt;code&gt;enum_map!&lt;/code&gt; macro, trusting user-provided length.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;LENGTH&lt;/code&gt; in the &lt;code&gt;Enum&lt;/code&gt; trait does not match the array length in the &lt;code&gt;EnumArray&lt;/code&gt; trait, this can result in the initialization of the enum map with uninitialized types, which in turn can allow an attacker to execute arbitrary code.&lt;/p&gt;
&lt;p&gt;This problem can only occur with a manual implementation of the Enum trait, it will never occur for enums that use &lt;code&gt;#[derive(Enum)]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example code that triggers this vulnerability looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;enum E {
    A,
    B,
    C,
}

impl Enum for E {
    const LENGTH: usize = 2;

    fn from_usize(value: usize) -&amp;gt; E {
        match value {
            0 =&amp;gt; E::A,
            1 =&amp;gt; E::B,
            2 =&amp;gt; E::C,
            _ =&amp;gt; unimplemented!(),
        }
    }

    fn into_usize(self) -&amp;gt; usize {
        self as usize
    }
}

impl&amp;lt;V&amp;gt; EnumArray&amp;lt;V&amp;gt; for E {
    type Array = [V; 3];
}

let _map: EnumMap&amp;lt;E, String&amp;gt; = enum_map! { _ =&amp;gt; &amp;quot;Hello, world!&amp;quot;.into() };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The flaw was corrected in commit &lt;a href=&quot;https://gitlab.com/KonradBorowski/enum-map/-/commit/b824e232f2fb47837740070096ac253df8e80dfc&quot;&gt;b824e23&lt;/a&gt; by putting &lt;code&gt;LENGTH&lt;/code&gt; property on sealed trait for macro to read.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0009: Vulnerability in libp2p-core</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0009.html</id><updated>2022-02-07T00:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0009.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0009: Vulnerability in libp2p-core"/><published>2022-02-07T00:00:00+00:00</published><summary xml:lang="en">Failure to verify the public key of a `SignedEnvelope` against the `PeerId` in a `PeerRecord`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/libp2p-core/RUSTSEC-2022-0009.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/libp2p-core/RUSTSEC-2022-0009.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0009
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Failure to verify the public key of a &lt;code&gt;SignedEnvelope&lt;/code&gt; against the &lt;code&gt;PeerId&lt;/code&gt; in a &lt;code&gt;PeerRecord&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-07&quot;&gt;
          February  7, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/libp2p-core.html&quot;&gt;libp2p-core&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/libp2p-core&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;^0.30.2&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.31.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.30.0-rc.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;libp2p_core::PeerRecord::from_signed_envelope&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.30.0-rc.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of this crate did not check that the public key the signature was created with matches the peer ID of the peer record.
Any combination was considered valid.&lt;/p&gt;
&lt;p&gt;This allows an attacker to republish an existing &lt;code&gt;PeerRecord&lt;/code&gt; with a different &lt;code&gt;PeerId&lt;/code&gt;.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0007: Unsoundness in qcell</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0007.html</id><updated>2022-01-24T00:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0007.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0007: Unsoundness in qcell"/><published>2022-01-24T00:00:00+00:00</published><summary xml:lang="en">A malicious coder can get unsound access to TCell or TLCell memory</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/qcell/RUSTSEC-2022-0007.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/qcell/RUSTSEC-2022-0007.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0007
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;A malicious coder can get unsound access to TCell or TLCell memory&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-24&quot;&gt;
          January 24, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/qcell.html&quot;&gt;qcell&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/qcell&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/unsound.html&quot;&gt;#unsound&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/uazu/qcell/issues/20&quot;&gt;
          https://github.com/uazu/qcell/issues/20
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.4.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/unsound.html&quot;&gt;#unsound&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;This is impossible to do by accident, but by carefully constructing
marker types to be covariant, a malicious coder can cheat the
singleton check in &lt;code&gt;TCellOwner&lt;/code&gt; and &lt;code&gt;TLCellOwner&lt;/code&gt;, giving unsound
access to cell memory.  This could take the form of getting two
mutable references to the same memory, or a mutable reference and an
immutable reference.&lt;/p&gt;
&lt;p&gt;The fix is for the crate to internally force the marker type to be
invariant.  This blocks the conversion between covariant types which
Rust normally allows.&lt;/p&gt;

  &lt;/article&gt;</content></entry></feed>