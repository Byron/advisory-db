<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RustSec Advisories</title><id>https://rustsec.org/feed.xml</id><updated>2022-03-04T00:00:00+00:00</updated><author><name>RustSec</name></author><icon>https://rustsec.org/favicon.ico</icon><link href="https://rustsec.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rustsec.org/" rel="alternate" type="text/html"/><subtitle xml:lang="en">Security advisories filed against Rust crates</subtitle><entry><title>RUSTSEC-2022-0012: Vulnerability in arrow2</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0012.html</id><updated>2022-03-04T00:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0012.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0012: Vulnerability in arrow2"/><published>2022-03-04T00:00:00+00:00</published><summary xml:lang="en">Arrow2 allows double free in `safe` code</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/arrow2/RUSTSEC-2022-0012.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/arrow2/RUSTSEC-2022-0012.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0012
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Arrow2 allows double free in &lt;code&gt;safe&lt;/code&gt; code&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-03-04&quot;&gt;
          March  4, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/arrow2.html&quot;&gt;arrow2&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/arrow2&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/jorgecarleitao/arrow2/issues/880&quot;&gt;
          https://github.com/jorgecarleitao/arrow2/issues/880
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.7.1, &amp;lt;0.8&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.8.2, &amp;lt;0.9&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.9.2, &amp;lt;0.10&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The struct &lt;code&gt;Ffi_ArrowArray&lt;/code&gt; implements &lt;code&gt;#derive(Clone)&lt;/code&gt; that is inconsistent with
its custom implementation of &lt;code&gt;Drop&lt;/code&gt;, resulting in a double free when cloned.&lt;/p&gt;
&lt;p&gt;Cloning this struct in &lt;code&gt;safe&lt;/code&gt; results in a segmentation fault, which is unsound.&lt;/p&gt;
&lt;p&gt;This derive was removed from this struct. All users are advised to either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bump the patch version of this crate (for versions &lt;code&gt;v0.7,v0.8,v0.9&lt;/code&gt;), or&lt;/li&gt;
&lt;li&gt;migrate to a more recent version of  the crate (when using &lt;code&gt;&amp;lt;0.7&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing so elimitates this vulnerability (code no longer compiles).&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0011: Vulnerability in rust-crypto</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0011.html</id><updated>2022-02-28T00:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0011.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0011: Vulnerability in rust-crypto"/><published>2022-02-28T00:00:00+00:00</published><summary xml:lang="en">Miscomputation when performing AES encryption in rust-crypto</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/rust-crypto/RUSTSEC-2022-0011.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/rust-crypto/RUSTSEC-2022-0011.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0011
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Miscomputation when performing AES encryption in rust-crypto&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-28&quot;&gt;
          February 28, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/rust-crypto.html&quot;&gt;rust-crypto&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/rust-crypto&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/aesni.html&quot;&gt;#aesni&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/aesni.html&quot;&gt;#aesni&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The following Rust program demonstrates some strangeness in AES encryption - if you have an immutable key slice and then operate on that slice, you get different encryption output than if you operate on a copy of that key.&lt;/p&gt;
&lt;p&gt;For these functions, we expect that extending a 16 byte key to a 32 byte key by repeating it gives the same encrypted data, because the underlying rust-crypto functions repeat key data up to the necessary key size for the cipher.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use crypto::{
    aes, blockmodes, buffer,
    buffer::{BufferResult, ReadBuffer, WriteBuffer},
    symmetriccipher,
};

fn encrypt(
    key: &amp;amp;[u8],
    iv: &amp;amp;[u8],
    data: &amp;amp;str,
) -&amp;gt; Result&amp;lt;String, symmetriccipher::SymmetricCipherError&amp;gt; {
    let mut encryptor =
        aes::cbc_encryptor(aes::KeySize::KeySize256, key, iv, blockmodes::PkcsPadding);

    let mut encrypted_data = Vec::&amp;lt;u8&amp;gt;::new();
    let mut read_buffer = buffer::RefReadBuffer::new(data.as_bytes());
    let mut buffer = [0; 4096];
    let mut write_buffer = buffer::RefWriteBuffer::new(&amp;amp;mut buffer);

    loop {
        let result = encryptor.encrypt(&amp;amp;mut read_buffer, &amp;amp;mut write_buffer, true)?;

        encrypted_data.extend(
            write_buffer
                .take_read_buffer()
                .take_remaining()
                .iter()
                .copied(),
        );

        match result {
            BufferResult::BufferUnderflow =&amp;gt; break,
            BufferResult::BufferOverflow =&amp;gt; {}
        }
    }

    Ok(hex::encode(encrypted_data))
}

fn working() {
    let data = &amp;quot;data&amp;quot;;
    let iv = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFF,
    ];
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    // The copy here makes the code work.
    let key_copy = key;
    let key2: Vec&amp;lt;u8&amp;gt; = key_copy.iter().cycle().take(32).copied().collect();
    println!(&amp;quot;key1:{} key2: {}&amp;quot;, hex::encode(&amp;amp;key), hex::encode(&amp;amp;key2));

    let x1 = encrypt(&amp;amp;key, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X1: {}&amp;quot;, x1);

    let x2 = encrypt(&amp;amp;key2, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X2: {}&amp;quot;, x2);

    assert_eq!(x1, x2);
}

fn broken() {
    let data = &amp;quot;data&amp;quot;;
    let iv = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFF,
    ];
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    // This operation shouldn&apos;t affect the contents of key at all.
    let key2: Vec&amp;lt;u8&amp;gt; = key.iter().cycle().take(32).copied().collect();
    println!(&amp;quot;key1:{} key2: {}&amp;quot;, hex::encode(&amp;amp;key), hex::encode(&amp;amp;key2));

    let x1 = encrypt(&amp;amp;key, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X1: {}&amp;quot;, x1);

    let x2 = encrypt(&amp;amp;key2, &amp;amp;iv, data).unwrap();
    println!(&amp;quot;X2: {}&amp;quot;, x2);

    assert_eq!(x1, x2);
}

fn main() {
    working();
    broken();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from this program:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;     Running `target/host/debug/rust-crypto-test`
key1:000102030405060708090a0b0c0d0e0f key2: 000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
X1: 90462bbe32965c8e7ea0addbbed4cddb
X2: 90462bbe32965c8e7ea0addbbed4cddb
key1:000102030405060708090a0b0c0d0e0f key2: 000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
X1: 26e847e5e7df1947bf82a650548a7d5b
X2: 90462bbe32965c8e7ea0addbbed4cddb
thread &apos;main&apos; panicked at &apos;assertion failed: `(left == right)`
  left: `&amp;quot;26e847e5e7df1947bf82a650548a7d5b&amp;quot;`,
 right: `&amp;quot;90462bbe32965c8e7ea0addbbed4cddb&amp;quot;`&apos;, src/main.rs:83:5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notably, the X1 key in the &lt;code&gt;broken()&lt;/code&gt; test changes every time after rerunning the program.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0010: Unsoundness in enum-map</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0010.html</id><updated>2022-02-17T00:00:00+00:00</updated><category term="code-execution"/><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0010.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0010: Unsoundness in enum-map"/><published>2022-02-17T00:00:00+00:00</published><summary xml:lang="en">enum_map macro can cause UB when `Enum` trait is incorrectly implemented</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/enum-map/RUSTSEC-2022-0010.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/enum-map/RUSTSEC-2022-0010.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0010
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;enum_map macro can cause UB when &lt;code&gt;Enum&lt;/code&gt; trait is incorrectly implemented&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-17&quot;&gt;
          February 17, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/enum-map.html&quot;&gt;enum-map&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/enum-map&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/code-execution.html&quot;&gt;code-execution&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202&quot;&gt;
          https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.0.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;2.0.0-2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of this crate did not properly check the length of an enum when using &lt;code&gt;enum_map!&lt;/code&gt; macro, trusting user-provided length.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;LENGTH&lt;/code&gt; in the &lt;code&gt;Enum&lt;/code&gt; trait does not match the array length in the &lt;code&gt;EnumArray&lt;/code&gt; trait, this can result in the initialization of the enum map with uninitialized types, which in turn can allow an attacker to execute arbitrary code.&lt;/p&gt;
&lt;p&gt;This problem can only occur with a manual implementation of the Enum trait, it will never occur for enums that use &lt;code&gt;#[derive(Enum)]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example code that triggers this vulnerability looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;enum E {
    A,
    B,
    C,
}

impl Enum for E {
    const LENGTH: usize = 2;

    fn from_usize(value: usize) -&amp;gt; E {
        match value {
            0 =&amp;gt; E::A,
            1 =&amp;gt; E::B,
            2 =&amp;gt; E::C,
            _ =&amp;gt; unimplemented!(),
        }
    }

    fn into_usize(self) -&amp;gt; usize {
        self as usize
    }
}

impl&amp;lt;V&amp;gt; EnumArray&amp;lt;V&amp;gt; for E {
    type Array = [V; 3];
}

let _map: EnumMap&amp;lt;E, String&amp;gt; = enum_map! { _ =&amp;gt; &amp;quot;Hello, world!&amp;quot;.into() };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The flaw was corrected in commit &lt;a href=&quot;https://gitlab.com/KonradBorowski/enum-map/-/commit/b824e232f2fb47837740070096ac253df8e80dfc&quot;&gt;b824e23&lt;/a&gt; by putting &lt;code&gt;LENGTH&lt;/code&gt; property on sealed trait for macro to read.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0009: Vulnerability in libp2p-core</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0009.html</id><updated>2022-02-07T00:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0009.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0009: Vulnerability in libp2p-core"/><published>2022-02-07T00:00:00+00:00</published><summary xml:lang="en">Failure to verify the public key of a `SignedEnvelope` against the `PeerId` in a `PeerRecord`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/libp2p-core/RUSTSEC-2022-0009.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/libp2p-core/RUSTSEC-2022-0009.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0009
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Failure to verify the public key of a &lt;code&gt;SignedEnvelope&lt;/code&gt; against the &lt;code&gt;PeerId&lt;/code&gt; in a &lt;code&gt;PeerRecord&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-02-07&quot;&gt;
          February  7, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/libp2p-core.html&quot;&gt;libp2p-core&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/libp2p-core&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;^0.30.2&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.31.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.30.0-rc.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;libp2p_core::PeerRecord::from_signed_envelope&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.30.0-rc.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of this crate did not check that the public key the signature was created with matches the peer ID of the peer record.
Any combination was considered valid.&lt;/p&gt;
&lt;p&gt;This allows an attacker to republish an existing &lt;code&gt;PeerRecord&lt;/code&gt; with a different &lt;code&gt;PeerId&lt;/code&gt;.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0007: Unsoundness in qcell</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0007.html</id><updated>2022-01-24T00:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0007.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0007: Unsoundness in qcell"/><published>2022-01-24T00:00:00+00:00</published><summary xml:lang="en">A malicious coder can get unsound access to TCell or TLCell memory</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/qcell/RUSTSEC-2022-0007.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/qcell/RUSTSEC-2022-0007.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0007
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;A malicious coder can get unsound access to TCell or TLCell memory&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-24&quot;&gt;
          January 24, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/qcell.html&quot;&gt;qcell&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/qcell&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/unsound.html&quot;&gt;#unsound&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/uazu/qcell/issues/20&quot;&gt;
          https://github.com/uazu/qcell/issues/20
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.4.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/unsound.html&quot;&gt;#unsound&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;This is impossible to do by accident, but by carefully constructing
marker types to be covariant, a malicious coder can cheat the
singleton check in &lt;code&gt;TCellOwner&lt;/code&gt; and &lt;code&gt;TLCellOwner&lt;/code&gt;, giving unsound
access to cell memory.  This could take the form of getting two
mutable references to the same memory, or a mutable reference and an
immutable reference.&lt;/p&gt;
&lt;p&gt;The fix is for the crate to internally force the marker type to be
invariant.  This blocks the conversion between covariant types which
Rust normally allows.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0006: Vulnerability in thread_local</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0006.html</id><updated>2022-01-23T00:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0006.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0006: Vulnerability in thread_local"/><published>2022-01-23T00:00:00+00:00</published><summary xml:lang="en">Data race in `Iter` and `IterMut`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/thread_local/RUSTSEC-2022-0006.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/thread_local/RUSTSEC-2022-0006.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0006
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Data race in &lt;code&gt;Iter&lt;/code&gt; and &lt;code&gt;IterMut&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-23&quot;&gt;
          January 23, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/thread_local.html&quot;&gt;thread_local&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/thread_local&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/Amanieu/thread_local-rs/issues/33&quot;&gt;
          https://github.com/Amanieu/thread_local-rs/issues/33
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.1.4&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In the affected version of this crate, &lt;code&gt;{Iter, IterMut}::next&lt;/code&gt; used a weaker memory ordering when loading values than what was required, exposing a potential data race
when iterating over a &lt;code&gt;ThreadLocal&lt;/code&gt;&apos;s values.&lt;/p&gt;
&lt;p&gt;Crates using &lt;code&gt;Iter::next&lt;/code&gt;, or &lt;code&gt;IterMut::next&lt;/code&gt; are affected by this issue.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0005: ftd2xx-embedded-hal is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0005.html</id><updated>2022-01-22T00:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0005.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0005: ftd2xx-embedded-hal is unmaintained"/><published>2022-01-22T00:00:00+00:00</published><summary xml:lang="en">crate has been renamed to `ftdi-embedded-hal`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/ftd2xx-embedded-hal/RUSTSEC-2022-0005.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/ftd2xx-embedded-hal/RUSTSEC-2022-0005.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0005
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;crate has been renamed to &lt;code&gt;ftdi-embedded-hal&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-22&quot;&gt;
          January 22, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/ftd2xx-embedded-hal.html&quot;&gt;ftd2xx-embedded-hal&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/ftd2xx-embedded-hal&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/newAM/ftd2xx-embedded-hal/pull/40&quot;&gt;
          https://github.com/newAM/ftd2xx-embedded-hal/pull/40
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
    &lt;/dl&gt;

    

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;This crate has been renamed from &lt;code&gt;ftd2xx-embedded-hal&lt;/code&gt; to &lt;code&gt;ftdi-embedded-hal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new repository location is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ftdi-rs/ftdi-embedded-hal&quot;&gt;https://github.com/ftdi-rs/ftdi-embedded-hal&lt;/a&gt;&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0003: Vulnerability in ammonia</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0003.html</id><updated>2022-01-19T00:00:00+00:00</updated><category term="format-injection"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0003.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0003: Vulnerability in ammonia"/><published>2022-01-19T00:00:00+00:00</published><summary xml:lang="en">Space bug in `clean_text`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/ammonia/RUSTSEC-2022-0003.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/ammonia/RUSTSEC-2022-0003.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0003
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Space bug in &lt;code&gt;clean_text&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-19&quot;&gt;
          January 19, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/ammonia.html&quot;&gt;ammonia&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/ammonia&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/format-injection.html&quot;&gt;format-injection&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/html.html&quot;&gt;#html&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/xss.html&quot;&gt;#xss&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/rust-ammonia/ammonia/pull/147&quot;&gt;
          https://github.com/rust-ammonia/ammonia/pull/147
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=3.1.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;3.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/html.html&quot;&gt;#html&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/xss.html&quot;&gt;#xss&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;ammonia::clean_text&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;=3.1.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;An incorrect mapping from HTML specification to ASCII codes was used.
Because HTML treats the Form Feed as whitespace, code like this has an injection bug:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let html = format!(&amp;quot;&amp;lt;div title={}&amp;gt;&amp;quot;, clean_text(user_supplied_string));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Applications are not affected if they quote their attributes, or if they don&apos;t use &lt;code&gt;clean_text&lt;/code&gt; at all.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>CVE-2022-21658: Vulnerability in std</title><id>https://rustsec.org/advisories/CVE-2022-21658.html</id><updated>2022-01-16T00:00:00+00:00</updated><category term="file-disclosure"/><link href="https://rustsec.org/advisories/CVE-2022-21658.html" rel="alternate" type="text/html" title="CVE-2022-21658: Vulnerability in std"/><published>2022-01-16T00:00:00+00:00</published><summary xml:lang="en">Time-of-check time-of-use race condition can allow attacker to delete files they do not have access to delete</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/rust/std/CVE-2022-21658.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/rust/std/CVE-2022-21658.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        CVE-2022-21658
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Time-of-check time-of-use race condition can allow attacker to delete files they do not have access to delete&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-16&quot;&gt;
          January 16, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        
        &lt;code&gt;&lt;a href=&quot;/packages/std.html&quot;&gt;std&lt;/a&gt;&lt;/code&gt;
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/file-disclosure.html&quot;&gt;file-disclosure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html&quot;&gt;
          https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      
      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;7.3 &lt;span class=&quot;tag high&quot;&gt;
        HIGH
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Local&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;Low&lt;/d&gt;
          

          
          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Changed&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;High&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:L/A:H&quot;&gt;CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:L/A:H&lt;/a&gt;&lt;/dd&gt;
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.58.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      

      
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;std::fs::remove_dir_all&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;1.58.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In the standard library in Rust before 1.58.1, an attacker with unprivileged access to a system could trick a privileged program using &lt;code&gt;std::fs::remove_dir_all&lt;/code&gt; into deleting files they don&apos;t have access to delete by creating a symlink in a directory that would be removed by a &lt;code&gt;std::fs::remove_dir_all&lt;/code&gt; call due to a Time-of-check time-of-use race condition around this function&apos;s check for symbolic links. The function should remove the symbolic links rather than recursively deleting the linked file or directory.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0002: Vulnerability in dashmap</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0002.html</id><updated>2022-01-10T00:00:00+00:00</updated><category term="memory-exposure"/><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0002.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0002: Vulnerability in dashmap"/><published>2022-01-10T00:00:00+00:00</published><summary xml:lang="en">Unsoundness in `dashmap` references</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/dashmap/RUSTSEC-2022-0002.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/dashmap/RUSTSEC-2022-0002.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        
        RUSTSEC-2022-0002
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Unsoundness in &lt;code&gt;dashmap&lt;/code&gt; references&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    

    &lt;dl&gt;
      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-10&quot;&gt;
          January 10, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        
        &lt;a href=&quot;/packages/dashmap.html&quot;&gt;dashmap&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/dashmap&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/segfault.html&quot;&gt;#segfault&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/xacrimon/dashmap/issues/167&quot;&gt;
          https://github.com/xacrimon/dashmap/issues/167
        &lt;/a&gt;
      &lt;/dd&gt;
      

      
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.1.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/segfault.html&quot;&gt;#segfault&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      
      
      

      
      
      
    &lt;/dl&gt;

    
    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMulti::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMulti::pair&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMulti::value&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMutMulti::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMutMulti::pair&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::multiple::RefMutMulti::pair_mut&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::Ref::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::Ref::pair&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::Ref::value&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::RefMut::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::RefMut::pair&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::mapref::one::RefMut::pair_mut&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::setref::multiple::RefMulti::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;dashmap::setref::one::Ref::key&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=5.0.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Reference returned by some methods of &lt;code&gt;Ref&lt;/code&gt; (and similar types) may outlive the &lt;code&gt;Ref&lt;/code&gt; and escape the lock.
This causes undefined behavior and may result in a segfault.&lt;/p&gt;
&lt;p&gt;More information in &lt;a href=&quot;https://github.com/xacrimon/dashmap/issues/167&quot;&gt;&lt;code&gt;dashmap#167&lt;/code&gt;&lt;/a&gt; issue.&lt;/p&gt;

  &lt;/article&gt;</content></entry></feed>