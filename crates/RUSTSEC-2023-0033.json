{
  "id": "RUSTSEC-2023-0033",
  "modified": "2023-04-13T17:03:15Z",
  "published": "2023-04-12T12:00:00Z",
  "aliases": [],
  "related": [],
  "summary": "Parsing borsh messages with ZST which are not-copy/clone is unsound",
  "details": "Affected versions of borsh cause undefined behaviour when zero-sized-types (ZST) are parsed and the Copy/Clone traits are not implemented/derived.\nFor instance if 1000 instances of a ZST are deserialized, and the ZST is not copy (this can be achieved through a a singleton), \nthen accessing/writing to deserialized data will cause a segmentation fault.\n\nThere is currently no way for borsh to read data without also providing a Rust type. Therefore, it there are not ZST used for serialization, then you are not affected by this issue.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "borsh",
        "purl": "pkg:cargo/borsh"
      },
      "ecosystem_specific": {
        "affects": {
          "arch": [],
          "os": [],
          "functions": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-corruption"
        ],
        "cvss": null,
        "informational": "unsound"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/borsh"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2023-0033.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/near/borsh-rs/issues/19"
    },
    {
      "type": "WEB",
      "url": "https://github.com/near/borsh-rs/pull/136"
    }
  ]
}